# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
def len(a):
    temp = a
    count = 0
    while (temp):
        count = count + 1
        temp = temp.next
    return count
class Solution:
    def mergeTwoLists(self, list1: list ,list2: list) -> list:
        output = []
        
        while list1 and list2 :
            #do sorting
            if list1.val <= list2.val:
                output.append(list1)
            else:
                output.append(list2)
            list1 = list1.next
            list2 = list2.next
        return output
        
        
        ##################################################################
        
        # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
def len(a):
    temp = a
    count = 0
    while (temp):
        count = count + 1
        temp = temp.next
    return count
class Solution:
    def mergeTwoLists(self, list1: list ,list2: list) -> list:
        output = []
        if list1 != [] and list2 != [] :
            #do sorting
            len1 = min(len(list1) ,len(list2))
            for i in range(0,len1):
                if list1[i] >= list2[i]:
                    output.append(list1[i])
                else:
                    output.append(list2[i])
            if len1 >= len(list2):
                output.append(lis1[len1:])
            else:
                output.append(lis2[len1:])
                
        elif list1 != [] :
            return list2
        else:
            return list1
            
        #################################################################################
        
        
        class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if not list1 and not list2:
            return list1
        if not list1 or not list2:
            return list1 if not list2 else list2
        seek, target = (list1, list2) if list1.val < list2.val else (list2, list1)
        head = seek
        while seek and target:
            while seek.next and seek.next.val < target.val:
                seek = seek.next
            seek.next, target = target, seek.next
            seek = seek.next
        return head
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
